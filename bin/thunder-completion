#!/usr/bin/env ruby

require File.expand_path("../../lib/thunder", __FILE__)
require 'erb'

def thunder_commands(spec)
  spec[:commands].map(&:first).map(&:to_s)
end

def thunder_options(spec)
  result = []
  spec.each do |opt, option|
    result << "--#{opt}"
    next unless option[:short]
    result << "-#{option[:short]}"
  end
  return result
end

def indent(text, amount, indent=" ")
  result = ""
  text.lines do |line|
    result << indent * amount + line
  end
  return result
end

def thunder_completion_options(spec)
  default_template = ERB.new <<-TEMPLATE, nil, "%>"
if [[ $current_word == "-" ]]; then
    words="<%= thunder_options(spec).join(" ") %>"
fi
  TEMPLATE
  default_template.filename="thunder-completion-options"
  default_template = default_template.result(binding)
  template = ERB.new <<-TEMPLATE, nil, "%>"
% complex_options = false
% complex_options = true if spec.values.any? { |option| option[:type] != Thunder::Boolean }
% if complex_options
case $previous_word; in
%   spec.select { |name, option| option[:type] != Thunder::Boolean }.each do |name, option|
    <%= ["--"+name.to_s, option[:short] ? "-"+option[:short].to_s : nil ].compact.join("|") %>)
        # placeholder for proper completion
        ;;
%   end
    *)
<%= indent(default_template, 8) %>
        ;;
esac
% else
<%= default_template %>
% end
  TEMPLATE
  template.filename="thunder-completion-options-complex"
  return template.result(binding)
end

def thunder_completion(depth, spec)
  template = ERB.new <<-TEMPLATE, nil, "%>"
if (($which_word == <%= depth+1 %>)); then
    # display only commands
    words="<%= thunder_commands(spec).join(" ") %>"
else
    case ${COMP_WORDS[<%= depth+1 %>]} in
% spec[:commands].each do |name, command|
%   name = name.to_s
    <%= name %>)
%   if name == "help"
        words="<%= thunder_commands(spec).join(" ") %>"
%   end
%   if command[:options]
<%= indent(thunder_completion_options(command[:options]), 8) %>
%   end
%   if command[:subcommand]
<%= indent(thunder_completion(depth+1, command[:subcommand].class.thunder), 8) %>
%   end
        ;;
% end
    esac
fi
  TEMPLATE
  template.filename="thunder-completion-main-#{depth}"
  return template.result(binding)
end

module Thunder
  def start(args=ARGV.dup, options={})
    template = ERB.new <<-TEMPLATE, nil, "%>"
#!/bin/bash

% progname = File.basename(ARGV.first)
__<%= progname %>_completion() {
    local current_word=${COMP_WORDS[COMP_CWORD]}
    local previous_word=${COMP_WORDS[COMP_CWORD-1]}
    local all_words=("${COMP_WORDS[@]}")
    local which_word=$COMP_CWORD
    if [[ $current_word == *"="* ]]; then
        previous_word=${current_word%=*}
        current_word=${current_word#*=}
    fi

    local words=""
<%= indent(thunder_completion(0, self.class.thunder), 4) %>
    COMPREPLY=($(compgen -W "$words" -- $current_word))
}

complete -o default -o nospace -F __<%= progname %>_completion <%= progname %>
    TEMPLATE
    template.filename="thunder-complete-start"
    puts template.result(binding)
  end
end

if ARGV.size != 1
  puts "Usage: #{File.basename(__FILE__)} THUNDER_SCRIPT"
  puts
  puts "Prints out the suggested template for a bash completion script for the given thunder script"
  exit 1
end

load File.expand_path(ARGV.first)
